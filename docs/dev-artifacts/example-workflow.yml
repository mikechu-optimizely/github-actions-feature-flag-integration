# Example Client Workflow for Optimizely Feature Flag Sync
# This is a reference implementation showing how clients would use the published GitHub Action
# Copy this to your repository's .github/workflows/ directory and customize as needed

name: Feature Flag Synchronization

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Weekly scheduled cleanup (Monday 6 AM UTC)
  # To change schedule, adjust the cron expression below.
  schedule:
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation type'
        required: true
        type: choice
        options: ['cleanup', 'audit']
        default: 'cleanup'
      dry_run:
        description: 'Dry run mode'
        required: false
        type: boolean
        default: true

jobs:
  feature-flag-sync:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # Use the published Optimizely Feature Flag Sync Action
      - name: Sync Feature Flags
        uses: optimizely/feature-flag-sync-action@v1
        with:
          optimizely-sdk-key: ${{ secrets.OPTIMIZELY_SDK_KEY }}
          optimizely-token: ${{ secrets.OPTIMIZELY_API_TOKEN }}
          project-id: ${{ secrets.OPTIMIZELY_PROJECT_ID }}
          scan-paths: 'src,lib,components'
          languages: 'typescript,javascript'
          # Default to cleanup/dry-run when triggered by schedule (no inputs present)
          dry-run: ${{ github.event.inputs.dry_run || 'true' }}
          operation: ${{ github.event.inputs.operation || 'cleanup' }}
      
      - name: Upload Sync Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: flag-sync-report-${{ github.run_number }}
          path: reports/
          retention-days: 30
          if-no-files-found: warn
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // The action will automatically handle PR comments
            // This is just a placeholder for additional custom logic
            console.log('Flag sync completed for PR #${{ github.event.number }}')

      - name: Create Issue on Failure (Scheduled Run)
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `Weekly Flag Cleanup failed - Run #${{ github.run_number }}`;
            const body = [
              'The scheduled weekly flag cleanup failed.',
              '',
              `- Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
              `- Commit: ${{ github.sha }}`,
              `- Ref: ${{ github.ref }}`,
              '',
              'Please investigate logs and the uploaded reports artifacts.'
            ].join('\n');
            try {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body,
                labels: ['bug', 'automated', 'flag-sync']
              });
              core.info('Opened failure issue for scheduled run.');
            } catch (e) {
              core.warning('Failed to create issue: ' + e.message);
            }

      - name: Job Summary
        if: always()
        run: |
          echo "## Feature Flag Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Operation**: ${{ github.event.inputs.operation || 'cleanup' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ github.event.inputs.dry_run || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "- **Schedule**: Monday 06:00 UTC (cron: '0 6 * * 1')" >> $GITHUB_STEP_SUMMARY
          fi
